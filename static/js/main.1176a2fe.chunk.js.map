{"version":3,"sources":["components/Navbar.js","components/Textform.js","About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","mystyle","borderColor","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","message","App","setmode","setalert","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2OAKe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SAAuCH,EAAMI,QAC7C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,qBAAIL,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,kBAAkB,eAAa,OAAOE,GAAG,IAAzD,oBAEJ,oBAAIF,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,SAA9B,SAAwCH,EAAMO,aAOtD,sBAAKN,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACI,uBAAOD,UAAU,mBAAmBO,QAASR,EAAMS,WAAYJ,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,yCC1BT,SAASC,EAASX,GAC7B,IA+CA,EAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,qCACI,sBAAKb,UAAU,iBAAiBc,MAAO,CAACC,MAAsB,UAAfhB,EAAME,KAAmB,QAAU,SAAlF,UACI,oBAAID,UAAU,OAAd,SAAsBD,EAAMiB,UAC5B,qBAAKhB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAeiB,MAAOL,EAAME,MAAO,CAACI,gBAAgC,UAAfnB,EAAME,KAAmB,QAAU,QAAQc,MAAsB,UAAfhB,EAAME,KAAmB,QAAU,SAAUkB,SAvBjK,SAACC,GAEpBP,EAAQO,EAAMC,OAAOJ,QAqByLZ,GAAG,QAAQiB,KAAK,QAEtN,wBAAQC,SAA0B,IAAhBX,EAAKY,OAAcxB,UAAU,4BAA4BO,QAxDjE,WAElB,IAAIkB,EAAUb,EAAKc,cACnBb,EAAQY,GACR1B,EAAM4B,UAAU,yBAAyB,YAoDjC,kCACA,wBAAQJ,SAA0B,IAAhBX,EAAKY,OAAcxB,UAAU,4BAA4BO,QAnD9D,WAErB,IAAIkB,EAAUb,EAAKgB,cACnBf,EAAQY,GACR1B,EAAM4B,UAAU,yBAAyB,YA+CjC,kCACA,wBAAQJ,SAA0B,IAAhBX,EAAKY,OAAcxB,UAAU,4BAA4BO,QA9C9D,WAGrBM,EADe,IAEfd,EAAM4B,UAAU,eAAe,YA0CvB,wBACA,wBAAQJ,SAA0B,IAAhBX,EAAKY,OAAcxB,UAAU,4BAA4BO,QAnCpE,WAGfsB,UAAUC,UAAUC,UAAUnB,GAC9Bb,EAAM4B,UAAU,sBAAsB,YA+B9B,uBACA,wBAAQJ,SAA0B,IAAhBX,EAAKY,OAAcxB,UAAU,4BAA4BO,QA1C/D,WAEpB,IAAIkB,EAAUb,EAAKoB,MAAM,QACzBnB,EAAQY,EAAQQ,KAAK,MACrBlC,EAAM4B,UAAU,uBAAuB,YAsC/B,0BAEJ,sBAAK3B,UAAU,iBAAiBc,MAAO,CAACC,MAAsB,UAAfhB,EAAME,KAAmB,QAAU,SAAlF,UACI,mDACA,8BAAIW,EAAKoB,MAAM,KAAKE,QAAO,SAACC,GAAa,OAA0B,IAAnBA,EAAQX,UAAeA,OAAvE,cAA0FZ,EAAKY,OAA/F,iBACA,8BAAI,KAAQZ,EAAKoB,MAAM,KAAKE,QAAO,SAACC,GAAa,OAA0B,IAAnBA,EAAQX,UAAeA,OAA/E,mBACA,yCACA,4BAAIZ,EAAKY,OAAO,EAAIZ,EAAO,6CCpE5B,SAASwB,EAAMrC,GAO1B,IAAIsC,EAAU,CACVtB,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,QACzCiB,gBAAgC,SAAfnB,EAAME,KAAkB,QAAU,QACnDqC,YAA4B,SAAfvC,EAAME,KAAkB,QAAU,SAuBnD,OACI,sBAAKD,UAAU,YAAYc,MAAO,CAACC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA5E,UACI,oBAAID,UAAU,OAAd,sBACA,sBAAKA,UAAU,YAAYK,GAAG,mBAA9B,UACI,sBAAKL,UAAU,iBAAiBc,MAAOuB,EAAvC,UACI,oBAAIrC,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,mBAAmBc,MAAOuB,EAASjC,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9J,SACI,4DAGR,qBAAKC,GAAG,cAAcL,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,qBAAKA,UAAU,iBAAf,+HAKR,sBAAKA,UAAU,iBAAiBc,MAAOuB,EAAvC,UACI,oBAAIrC,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,6BAA6Bc,MAAOuB,EAASjC,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzK,SACI,sDAGR,qBAAKC,GAAG,cAAcL,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,qBAAKA,UAAU,iBAAf,oQAIR,sBAAKA,UAAU,iBAAiBc,MAAOuB,EAAvC,UACI,oBAAIrC,UAAU,mBAAmBK,GAAG,eAApC,SACI,wBAAQL,UAAU,6BAA6Bc,MAAOuB,EAASjC,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3K,SACI,6DAGR,qBAAKC,GAAG,gBAAgBL,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,qBAAKA,UAAU,iBAAf,0OF5BxBF,EAAOyC,aAAe,CAClBpC,MAAO,YACPG,MAAO,aGzBIkC,MAhBf,SAAezC,GAMX,OACI,qBAAKe,MAAO,CAAC2B,OAAO,QAApB,SACC1C,EAAM2C,OAAU,sBAAK1C,UAAS,sBAAiBD,EAAM2C,MAAMtC,KAA7B,gCAAiEuC,KAAK,QAApF,UACb,iCARW,SAACC,GAChB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMC,OAAO,GAAGpB,cAAgBmB,EAAME,MAAM,GAMtCC,CAAWjD,EAAM2C,MAAMtC,QADnB,KACqCL,EAAM2C,MAAMO,c,OCmD3DC,MAhDf,WACE,MAAwBvC,mBAAS,SAAjC,mBAAOV,EAAP,KAAakD,EAAb,KACA,EAA0BxC,mBAAS,MAAnC,mBAAO+B,EAAP,KAAcU,EAAd,KAiBMzB,EAAY,SAACsB,EAAS7C,GAC1BgD,EAAS,CACPH,QAASA,EACT7C,KAAMA,IAERiD,YAAW,WACTD,EAAS,QACR,MAGL,OACE,mCACE,eAAC,IAAD,WACA,cAACtD,EAAD,CAAQK,MAAM,YAAYG,MAAM,QAAQL,KAAMA,EAAMO,WA5BrC,WACJ,UAATP,GACFkD,EAAQ,QACRG,SAASC,KAAKzC,MAAMI,gBAAkB,QACtCS,EAAU,8BAA+B,aAIzCwB,EAAQ,SACRG,SAASC,KAAKzC,MAAMI,gBAAkB,QACtCS,EAAU,+BAAgC,eAmB1C,cAAC,EAAD,CAAOe,MAAOA,IACd,eAAC,IAAD,WACE,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC/C,EAAD,CAAUM,QAAQ,uEAAuEf,KAAMA,EAAM0B,UAAWA,MAElH,cAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,SAAlB,SACE,cAACrB,EAAD,CAAOnC,KAAOA,eCzCTyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.1176a2fe.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title\",\r\n    about: \"set about\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"upercase click\" + text )\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to UpperCase\",\"success\");\r\n    }\r\n    const handleLowerClick = () => {\r\n        // console.log(\"lowercase click\" + text )\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to LowerCase\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"clear click\" + text )\r\n        let newText = ('');\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n    const handleTrimClick = () => {\r\n        // console.log(\"trim click\" + text )\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        // let newText = text;\r\n        // newText.select();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event) => {\r\n        // console.log(\"handleOnChange click\")\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // const wordCount = () => {\r\n    //     if(text.endsWith(' ')){\r\n    //         return (text.split(' ').length) - 1;\r\n    //     }\r\n    //     else{\r\n    //         return text.split(' ').length;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n                <h1 className=\"mb-4\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode === 'light' ? 'white' : 'black',color: props.mode === 'light' ? 'black' : 'white'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowerClick}>Convert to LowerCase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleTrimClick}>Trim Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").filter((element) => {return element.length !== 0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element) => {return element.length !== 0}).length} minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0 ? text : \"Enter something to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [mystyle, setmstyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n\r\n    let mystyle = {\r\n        color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        backgroundColor: props.mode === \"dark\" ? \"black\" : \"white\",\r\n        borderColor: props.mode === \"dark\" ? \"white\" : \"black\"\r\n    }\r\n\r\n    // const [btntext, setbtntext] = useState(\"Enable dark mode\")\r\n\r\n    // const toggleStyle = () => {\r\n    //     if (mystyle.color === 'black') {\r\n    //         setmstyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px white solid'\r\n    //         })\r\n    //         setbtntext(\"Enable light mode\")\r\n    //     }\r\n    //     else {\r\n    //         setmstyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setbtntext(\"Enable dark mode\")\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={{color: props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            <strong> Analyze Your text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            <strong>Free to use </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Compatible </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './About';\nimport { useState } from 'react'\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"dark mode hase been enabled\", \"success\");\n      // document.title = \"TextUtils-Dark Mode\";\n\n    } else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode hase been enabled\", \"success\");\n      // document.title = \"TextUtils-Light Mode\";\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setalert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <Switch>\n        <Route exact path=\"/\">\n          <Textform heading=\"Try TextUtils - word counter, character counter, Remove extra spaces\" mode={mode} showAlert={showAlert} />\n        </Route>\n        <Route exact path=\"/about\">\n          <About mode= {mode}/>\n        </Route>\n      </Switch>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}