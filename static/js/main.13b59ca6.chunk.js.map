{"version":3,"sources":["components/Navbar.js","components/Textform.js","About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","length","About","mystyle","setmstyle","btntext","setbtntext","border","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setmode","setalert","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.13b59ca6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title\",\r\n    about: \"set about\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"upercase click\" + text )\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to UpperCase\",\"success\");\r\n    }\r\n    const handleLowerClick = () => {\r\n        // console.log(\"lowercase click\" + text )\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to LowerCase\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"clear click\" + text )\r\n        let newText = ('');\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n    const handleTrimClick = () => {\r\n        // console.log(\"trim click\" + text )\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        // let newText = text;\r\n        // newText.select();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event) => {\r\n        // console.log(\"handleOnChange click\")\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // const wordCount = () => {\r\n    //     if(text.endsWith(' ')){\r\n    //         return (text.split(' ').length) - 1;\r\n    //     }\r\n    //     else{\r\n    //         return text.split(' ').length;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode === 'light' ? 'white' : 'black',color: props.mode === 'light' ? 'black' : 'white'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowerClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleTrimClick}>Trim Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'light' ? 'black' : 'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0 ? text : \"Enter something to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle, setmstyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btntext, setbtntext] = useState(\"Enable dark mode\")\r\n\r\n    const toggleStyle = () => {\r\n        if(mystyle.color === 'black'){\r\n            setmstyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px white solid'\r\n            })\r\n            setbtntext(\"Enable light mode\")\r\n        }\r\n        else{\r\n            setmstyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setbtntext(\"Enable dark mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={mystyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './About';\nimport { useState } from 'react'\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"dark mode hase been enabled\", \"success\");\n      // document.title = \"TextUtils-Dark Mode\";\n\n    } else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode hase been enabled\", \"success\");\n      // document.title = \"TextUtils-Light Mode\";\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setalert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <Switch>\n        <Route exact path=\"/\">\n          <Textform heading=\"Enter the text for analyze below\" mode={mode} showAlert={showAlert} />\n        </Route>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}